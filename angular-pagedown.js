// Generated by CoffeeScript 1.9.3
(function() {
  var mdExtraOptions;

  mdExtraOptions = {
    extensions: 'all',
    table_class: 'table'
  };

  angular.module('ui.pagedown', []).directive('pagedownEditor', [
    '$compile', '$timeout', '$window', '$q', function($compile, $timeout, $window, $q) {
      var converter, nextId;
      nextId = 0;
      converter = Markdown.getSanitizingConverter();
      Markdown.Extra.init(converter, mdExtraOptions);
      converter.hooks.chain('preBlockGamut', function(text, rbg) {
        return text.replace(/^ {0,3}""" *\n((?:.*?\n)+?) {0,3}""" *$/gm, function(whole, inner) {
          return '<blockquote>' + rbg(inner) + '</blockquote>\n';
        });
      });
      return {
        restrict: 'E',
        require: 'ngModel',
        scope: {
          ngModel: '=',
          placeholder: '@',
          showPreview: '@',
          help: '&',
          insertImage: '&',
          editorClass: '=?',
          editorRows: '@',
          previewClass: '=?',
          previewContent: '=?'
        },
        link: function(scope, element, attrs, ngModel) {
          var editor, editorElement, editorRows, editorUniqueId, help, newElement, placeholder, previewHiddenStyle;
          scope.changed = function() {
            ngModel.$setDirty();
            scope.$parent.$eval(attrs.ngChange);
          };
          editorUniqueId = void 0;
          if (attrs.id === null) {
            editorUniqueId = nextId++;
          } else {
            editorUniqueId = attrs.id;
          }
          previewHiddenStyle = scope.showPreview === 'false' ? 'display: none;' : '';
          placeholder = attrs.placeholder || '';
          editorRows = attrs.editorRows || '10';
          newElement = $compile('<div>' + '<div class="wmd-panel">' + '<div id="wmd-button-bar-' + editorUniqueId + '"></div>' + '<textarea id="wmd-input-' + editorUniqueId + '" placeholder="' + placeholder + '" ng-model="ngModel"' + ' ng-change="changed()"' + ' rows="' + editorRows + '" ' + (scope.editorClass ? 'ng-class="editorClass"' : 'class="wmd-input"') + '>' + '</textarea>' + '</div>' + '<div id="wmd-preview-' + editorUniqueId + '" style="' + previewHiddenStyle + '"' + ' ' + (scope.previewClass ? 'ng-class="previewClass"' : 'class="wmd-panel wmd-preview"') + '>' + '</div>' + '</div>')(scope);
          element.append(newElement);
          help = angular.isFunction(scope.help) ? scope.help : (function() {
            $window.open('http://daringfireball.net/projects/markdown/syntax', '_blank');
          });
          editor = new Markdown.Editor(converter, '-' + editorUniqueId, {
            handler: help
          });
          editorElement = angular.element(document.getElementById('wmd-input-' + editorUniqueId));
          editorElement.val(scope.ngModel);
          converter.hooks.chain('postConversion', function(text) {
            ngModel.$setViewValue(editorElement.val());
            scope.previewContent = text;
            return text;
          });
          if (scope.showPreview !== 'false') {
            scope.$watch('content', function() {
              editor.refreshPreview();
            });
          }
          editor.hooks.chain('onPreviewRefresh', function() {
            $timeout(function() {
              scope.content = editorElement.val();
            });
          });
          if (angular.isFunction(scope.insertImage)) {
            editor.hooks.set('insertImageDialog', function(callback) {
              var result;
              result = scope.insertImage();
              $timeout(function() {
                if (!result) {
                  callback(null);
                } else {
                  $q.when(result).then((function(imgUrl) {
                    callback(imgUrl);
                  }), function(reason) {
                    callback(null);
                  });
                }
              });
              return true;
            });
          }
          editor.run();
        }
      };
    }
  ]).directive('pagedownViewer', [
    '$compile', '$sce', function($compile, $sce) {
      var converter;
      converter = Markdown.getSanitizingConverter();
      Markdown.Extra.init(converter, mdExtraOptions);
      return {
        restrict: 'E',
        scope: {
          content: '='
        },
        link: function(scope, element, attrs) {
          var newElement, newElementHtml, run;
          run = function() {
            if (!scope.content) {
              scope.sanitizedContent = '';
              return;
            }
            scope.sanitizedContent = $sce.trustAsHtml(converter.makeHtml(scope.content));
          };
          scope.$watch('content', run);
          run();
          newElementHtml = '<p ng-bind-html=\'sanitizedContent\'></p>';
          newElement = $compile(newElementHtml)(scope);
          element.append(newElement);
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=angular-pagedown.js.map
